try:
            os.mkdir("monthly_data")
        except:
            pass
        self.date_list_month = ['20210101', '20210201', '20210301', '20210401']
        for date in self.date_list_month:
            print(f'Collecting {date} data from website')

            for company_code in self.candi_company_dic.keys():
                print(company_code)
                # get each company's closing for all year
                requests.adapters.DEFAULT_RETRIES = 5
                time.sleep(5)
                r = requests.get(f'https://www.twse.com.tw/exchangeReport/STOCK_DAY?response=csv&date={date}&stockNo={company_code}', headers = my_headers)
                info = [l[:-1].replace('\"','').replace("-",'-1').replace("+",'1').split(",") for l in r.text.split("\r\n")[1:-13]]
                info_dict = {z[0] : list(z[1:]) for z in zip(*info)}
                info_df = pd.DataFrame(info_dict)
                info_df.to_csv(f'monthly_data/{company_code}_{date}.csv', encoding = 'utf_8_sig')
                
                # store closing price in dictionary
                try:
                    clos_price_all[company_code].append(list(pd.to_numeric(info_df['收盤價'], errors = 'ignore')))
                except KeyError:             
                    print(info_df)
                    
        for company in clos_price_all.keys():
            # calculate ave(60)
            for n in range(0, len(clos_price_all[company])-1):
                ave_close_price_60[company].append((numpy.mean(clos_price_all[company][n]) + numpy.mean(clos_price_all[company][n+1])) / 2)
            # calculate ave(120)
            for n in range(0, len(clos_price_all[company])-3):
                ave_close_price_120[company].append((numpy.mean(clos_price_all[company][n]) + numpy.mean(clos_price_all[company][n+1]) 
                                                     + numpy.mean(clos_price_all[company][n+2]) + numpy.mean(clos_price_all[company][n+3])) / 4)

        for company in clos_price_all.keys():
            for n in range(len(ave_close_price_60[company])):
                if clos_price_all[company][n+1][-1] < ave_close_price_60[company][n]:
                    pass
                else:
                    self.del_company(company)
            for n in range(len(ave_close_price_120[company])):
                if clos_price_all[company][n+3][-1] < ave_close_price_120[company][n]:
                    pass
                else:
                    self.del_company(company)
